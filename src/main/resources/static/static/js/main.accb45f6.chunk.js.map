{"version":3,"sources":["PeopleTable.tsx","PersonHTTPRepository.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PeopleTable","props","shouldDisplay","people","map","p","key","id","name","onClick","repo","deletePeople","PersonHTTPRepository","fetch","method","headers","credentials","results","json","resultsJson","jsonToPersonInterface","personData","App","useState","setShouldDisplay","setPeople","setName","personHTTPRepository","submit","a","useEffect","getPeople","then","style","backgroundColor","className","onKeyPress","event","onChange","e","target","value","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOA4BeA,MAlBf,SAAqBC,GACjB,OACI,6BACKA,EAAMC,eAAiBD,EAAME,OAAOC,KAAK,SAAAC,GAAC,OACvC,oCACA,wBAAIC,IAAKD,EAAEE,IAENF,EAAEG,KAFP,KAEe,aACX,4BAAQC,QAAS,kBAAMR,EAAMS,KAAKC,aAAaN,EAAEE,MAAjD,iB,qBCoBLK,E,sOAxBeC,MAAM,iBAAkB,CAC1CC,OAAQ,MACRC,QAAS,CACL,eAAgB,mCAEpBC,YAAa,gB,cALXC,E,gBAQoBA,EAAQC,O,cAA5BC,E,yBACCA,EAAYf,IAAIQ,EAAqBQ,wB,6KAGtBb,G,iFAChBM,MAAM,wBAAD,OAAyBN,GAAM,CACtCO,OAAQ,SACRC,QAAS,CACL,eAAgB,mCAEpBC,YAAa,gB,gJAzBgBK,GACjC,OAAO,eACAA,O,KCmDAC,MAlDf,WAAgB,IAAD,EAE+BC,oBAAkB,GAFjD,mBAEJrB,EAFI,KAEWsB,EAFX,OAGiBD,mBAAmB,IAHpC,mBAGJpB,EAHI,KAGIsB,EAHJ,OAIaF,mBAAiB,IAJ9B,mBAIJf,EAJI,KAIEkB,EAJF,KAKLC,EAAuB,IAAIf,EALtB,SAUIgB,EAVJ,8EAUX,WAAsBpB,GAAtB,SAAAqB,EAAA,sEACUhB,MAAM,uBAAD,OAAwBL,GAAQ,CACvCM,OAAQ,OACRE,YAAa,gBAHrB,OAKIU,EAAQ,IALZ,4CAVW,sBAkBX,OAZAI,qBAAU,WACNH,EAAqBI,YAAYC,MAAK,SAAC7B,GAAD,OAAYsB,EAAUtB,QAC7D,CAACD,IAWA,oCACI,yBAAK+B,MAAO,CAACC,gBAAiB,WAAYC,UAAU,OAChD,sCAEI,2BACIC,WAAY,SAACC,GAAD,MAAyB,UAAdA,EAAM/B,KAAmBsB,EAAOpB,IACvD8B,SAAU,SAACC,GAAD,OAAYb,EAAQa,EAAEC,OAAOC,QACvCC,KAAM,OACND,MAAOjC,IAEX,4BACIC,QAAS,kBAAMmB,EAAOpB,KAD1B,WAMJ,4BACI,4BACIC,QAAS,kBAAMe,GAAkBtB,KADrC,sBAOR,6BACI,kBAAC,EAAD,CAAaC,OAAQA,EAAQD,cAAeA,EAAeQ,KAAMiB,OC1C7DgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.accb45f6.chunk.js","sourcesContent":["import React from \"react\";\nimport {Person} from \"./App\";\nimport PersonHTTPRepository from \"./PersonHTTPRepository\";\n\ninterface PeopleTableProps {\n    people:Person[];\n    shouldDisplay:boolean;\n    repo:PersonHTTPRepository\n}\n\nfunction PeopleTable(props:PeopleTableProps) {\n    return (\n        <div>\n            {props.shouldDisplay && props.people.map( p =>\n                <>\n                <h3 key={p.id}>\n\n                    {p.name}  {\"          \"}\n                    <button onClick={() => props.repo.deletePeople(p.id)}>\n                        Delete\n                    </button>\n                </h3>\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default PeopleTable;\n\n","import {Person} from \"./App\";\n\nexport interface PersonRepository {\n    getPeople: () => Promise<Person[]>;\n}\n\nclass PersonHTTPRepository implements PersonRepository {\n    private static jsonToPersonInterface(personData: any): Person {\n        return {\n            ...personData,\n        };\n    }\n\n    public async getPeople() {\n        const results = await fetch(`/api/getPeople`, {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n            },\n            credentials: \"same-origin\"\n        });\n\n        const resultsJson = await results.json();\n        return resultsJson.map(PersonHTTPRepository.jsonToPersonInterface)\n    }\n\n    public async deletePeople(id:number) {\n        await fetch(`/api/deletePerson?id=${id}`, {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n            },\n            credentials: \"same-origin\"\n        });\n    }\n}\n\n\nexport default PersonHTTPRepository;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport PeopleTable from \"./PeopleTable\";\nimport PersonHTTPRepository from \"./PersonHTTPRepository\";\n\nexport interface Person {\n    id: number;\n    name: string;\n}\n\nfunction App() {\n\n    const [shouldDisplay, setShouldDisplay] = useState<boolean>(true);\n    const [people, setPeople] = useState<Person[]>([]);\n    const [name, setName] = useState<string>(\"\");\n    const personHTTPRepository = new PersonHTTPRepository();\n    useEffect(() => {\n        personHTTPRepository.getPeople().then((people) => setPeople(people))\n    }, [shouldDisplay])\n\n    async function submit(name: string) {\n        await fetch(`/api/addPerson?name=${name}`, {\n            method: \"POST\",\n            credentials: \"same-origin\"\n        })\n        setName(\"\");\n    }\n\n    return (\n        <>\n            <div style={{backgroundColor: '#61fbee'}} className=\"App\">\n                <label>\n                    name\n                    <input\n                        onKeyPress={(event) => event.key === \"Enter\" && submit(name)}\n                        onChange={(e: any) => setName(e.target.value)}\n                        type={\"text\"}\n                        value={name}\n                    />\n                    <button\n                        onClick={() => submit(name)}\n                    >\n                        submit\n                    </button>\n                </label>\n                <h3>\n                    <button\n                        onClick={() => setShouldDisplay(!shouldDisplay)}\n                    >\n                        Display Everyone\n                    </button>\n                </h3>\n            </div>\n            <div>\n                <PeopleTable people={people} shouldDisplay={shouldDisplay} repo={personHTTPRepository}/>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}