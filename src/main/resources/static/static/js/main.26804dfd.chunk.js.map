{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","shouldDisplay","people","setPeople","name","setName","person","setPerson","submit","a","fetch","method","credentials","displayAllPeople","then","res","json","forEach","push","id","console","log","useEffect","style","backgroundColor","className","onKeyPress","event","key","onChange","e","target","value","type","onClick","map","p","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sOAiFeA,MAzEf,WAAgB,IAAD,EAE+BC,oBAAkB,GAFjD,mBAEJC,EAFI,aAGiBD,mBAAoB,KAHrC,mBAGJE,EAHI,KAGIC,EAHJ,OAIaH,mBAAkB,IAJ/B,mBAIJI,EAJI,KAIEC,EAJF,OAKiBL,mBAAkBE,EAAO,IAL1C,mBAKJI,EALI,KAKIC,EALJ,cAUIC,EAVJ,8EAUX,WAAsBJ,GAAtB,SAAAK,EAAA,sEACUC,MAAM,uBAAD,OAAwBN,GAAQ,CACvCO,OAAQ,OACRC,YAAa,gBAHrB,OAKIP,EAAQ,IALZ,4CAVW,sBAkBX,SAASQ,IACLV,EAAU,IACVO,MAAM,iBAAkB,CACpBC,OAAQ,MACRC,YAAa,gBACdE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAC5BA,EAAKC,SAAQ,SAACX,GACVJ,EAAOgB,KAAK,CAACd,KAAME,EAAOF,KAAMe,GAAIb,EAAOa,WAGnDZ,EAAUL,EAAO,IACjBkB,QAAQC,IAAI,eAAgBnB,GAGhC,OA1BAoB,qBAAU,WACNT,MACD,CAACZ,IAyBA,oCACI,yBAAKsB,MAAO,CAACC,gBAAiB,WAAYC,UAAU,OAChD,sCAEI,2BACIC,WAAY,SAACC,GAAD,MAAyB,UAAdA,EAAMC,KAAmBpB,EAAOJ,IACvDyB,SAAU,SAACC,GAAD,OAAYzB,EAAQyB,EAAEC,OAAOC,QACvCC,KAAM,OACND,MAAO5B,IAEX,4BACI8B,QAAS,kBAAM1B,EAAOJ,KAD1B,WAMJ,4BACKgB,QAAQC,IAAI,iBAAkBnB,GAC9BD,GAAiBC,EAAOiC,KAAK,SAAAC,GAAC,OAC3B,wBAAIR,IAAKQ,EAAEjB,IACFiB,EAAEhC,SAGf,4BACI8B,QAAS,kBAAMrB,MADnB,qBAMJ,4BACKO,QAAQC,IAAI,iBAAkBf,GAC9Bc,QAAQC,IAAI,iBAAkBnB,GAC9BI,MC7DD+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.26804dfd.chunk.js","sourcesContent":["import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\n\ninterface Person {\n    id: number;\n    name: string;\n}\n\nfunction App() {\n\n    const [shouldDisplay, setShouldDisplay] = useState<boolean>(true);\n    const [people, setPeople] = useState<Person[]>( []);\n    const [name, setName] = useState<string>( \"\");\n    const [person, setPerson] = useState<Person> (people[0]);\n    useEffect(() => {\n        displayAllPeople()\n    }, [shouldDisplay])\n\n    async function submit(name: string) {\n        await fetch(`/api/addPerson?name=${name}`, {\n            method: \"POST\",\n            credentials: \"same-origin\"\n        })\n        setName(\"\");\n    }\n\n    function displayAllPeople() {\n        setPeople([]);\n        fetch(`/api/getPeople`, {\n            method: \"GET\",\n            credentials: \"same-origin\"\n        }).then(res => res.json()).then(json => {\n            json.forEach((person: Person) => {\n                people.push({name: person.name, id: person.id})\n            })\n        })\n        setPerson(people[0]);\n        console.log(\"hello people\", people);\n    }\n\n    return (\n        <>\n            <div style={{backgroundColor: '#61a6fb'}} className=\"App\">\n                <label>\n                    name\n                    <input\n                        onKeyPress={(event) => event.key === \"Enter\" && submit(name)}\n                        onChange={(e: any) => setName(e.target.value)}\n                        type={\"text\"}\n                        value={name}\n                    />\n                    <button\n                        onClick={() => submit(name)}\n                    >\n                        submit\n                    </button>\n                </label>\n                <h3>\n                    {console.log(\"display please\", people)}\n                    {shouldDisplay && people.map( p =>\n                        <h3 key={p.id}>\n                                {p.name}\n                            </h3>\n                    )}\n                    <button\n                        onClick={() => displayAllPeople()}\n                    >\n                        Display Everyone\n                    </button>\n                </h3>\n                <h3>\n                    {console.log(\"this is person\", person)}\n                    {console.log(\"this is people\", people)}\n                    {person}\n                </h3>\n            </div>\n        </>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}